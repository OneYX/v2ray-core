// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v2ray.com/core/app/router/config.proto

/*
Package router is a generated protocol buffer package.

It is generated from these files:
	v2ray.com/core/app/router/config.proto

It has these top-level messages:
	Domain
	CIDR
	RoutingRule
	Config
*/
package router

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v2ray_core_common_net "v2ray.com/core/common/net"
import v2ray_core_common_net1 "v2ray.com/core/common/net"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type of domain value.
type Domain_Type int32

const (
	// The value is used as is.
	Domain_Plain Domain_Type = 0
	// The value is used as a regular expression.
	Domain_Regex Domain_Type = 1
	// The value is a domain.
	Domain_Domain Domain_Type = 2
)

var Domain_Type_name = map[int32]string{
	0: "Plain",
	1: "Regex",
	2: "Domain",
}
var Domain_Type_value = map[string]int32{
	"Plain":  0,
	"Regex":  1,
	"Domain": 2,
}

func (x Domain_Type) String() string {
	return proto.EnumName(Domain_Type_name, int32(x))
}
func (Domain_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Type of RoutingRule value.
type RoutingRule_Type int32

const (
	RoutingRule_Field      RoutingRule_Type = 0
	RoutingRule_ChinaIp    RoutingRule_Type = 1
	RoutingRule_ChinaSites RoutingRule_Type = 2
	RoutingRule_GfwList    RoutingRule_Type = 3
)

var RoutingRule_Type_name = map[int32]string{
	0: "Field",
	1: "ChinaIp",
	2: "ChinaSites",
	3: "GfwList",
}
var RoutingRule_Type_value = map[string]int32{
	"Field":      0,
	"ChinaIp":    1,
	"ChinaSites": 2,
	"GfwList":    3,
}

func (x RoutingRule_Type) String() string {
	return proto.EnumName(RoutingRule_Type_name, int32(x))
}
func (RoutingRule_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Config_DomainStrategy int32

const (
	// Use domain as is.
	Config_AsIs Config_DomainStrategy = 0
	// Always resolve IP for domains.
	Config_UseIp Config_DomainStrategy = 1
	// Resolve to IP if the domain doesn't match any rules.
	Config_IpIfNonMatch Config_DomainStrategy = 2
)

var Config_DomainStrategy_name = map[int32]string{
	0: "AsIs",
	1: "UseIp",
	2: "IpIfNonMatch",
}
var Config_DomainStrategy_value = map[string]int32{
	"AsIs":         0,
	"UseIp":        1,
	"IpIfNonMatch": 2,
}

func (x Config_DomainStrategy) String() string {
	return proto.EnumName(Config_DomainStrategy_name, int32(x))
}
func (Config_DomainStrategy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// Domain for routing decision.
type Domain struct {
	// Domain matching type.
	Type Domain_Type `protobuf:"varint,1,opt,name=type,enum=v2ray.core.app.router.Domain_Type" json:"type,omitempty"`
	// Domain value.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Domain) GetType() Domain_Type {
	if m != nil {
		return m.Type
	}
	return Domain_Plain
}

func (m *Domain) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IP for routing decision, in CIDR form.
type CIDR struct {
	// IP address, should be either 4 or 16 bytes.
	Ip []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Number of leading ones in the network mask.
	Prefix uint32 `protobuf:"varint,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *CIDR) Reset()                    { *m = CIDR{} }
func (m *CIDR) String() string            { return proto.CompactTextString(m) }
func (*CIDR) ProtoMessage()               {}
func (*CIDR) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CIDR) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *CIDR) GetPrefix() uint32 {
	if m != nil {
		return m.Prefix
	}
	return 0
}

type RoutingRule struct {
	Tag         string                              `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Domain      []*Domain                           `protobuf:"bytes,2,rep,name=domain" json:"domain,omitempty"`
	Cidr        []*CIDR                             `protobuf:"bytes,3,rep,name=cidr" json:"cidr,omitempty"`
	PortRange   *v2ray_core_common_net.PortRange    `protobuf:"bytes,4,opt,name=port_range,json=portRange" json:"port_range,omitempty"`
	NetworkList *v2ray_core_common_net1.NetworkList `protobuf:"bytes,5,opt,name=network_list,json=networkList" json:"network_list,omitempty"`
	SourceCidr  []*CIDR                             `protobuf:"bytes,6,rep,name=source_cidr,json=sourceCidr" json:"source_cidr,omitempty"`
	UserEmail   []string                            `protobuf:"bytes,7,rep,name=user_email,json=userEmail" json:"user_email,omitempty"`
	InboundTag  []string                            `protobuf:"bytes,8,rep,name=inbound_tag,json=inboundTag" json:"inbound_tag,omitempty"`
	// RoutingRule matching type.
	Type RoutingRule_Type `protobuf:"varint,9,opt,name=type,enum=v2ray.core.app.router.RoutingRule_Type" json:"type,omitempty"`
}

func (m *RoutingRule) Reset()                    { *m = RoutingRule{} }
func (m *RoutingRule) String() string            { return proto.CompactTextString(m) }
func (*RoutingRule) ProtoMessage()               {}
func (*RoutingRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RoutingRule) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *RoutingRule) GetDomain() []*Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *RoutingRule) GetCidr() []*CIDR {
	if m != nil {
		return m.Cidr
	}
	return nil
}

func (m *RoutingRule) GetPortRange() *v2ray_core_common_net.PortRange {
	if m != nil {
		return m.PortRange
	}
	return nil
}

func (m *RoutingRule) GetNetworkList() *v2ray_core_common_net1.NetworkList {
	if m != nil {
		return m.NetworkList
	}
	return nil
}

func (m *RoutingRule) GetSourceCidr() []*CIDR {
	if m != nil {
		return m.SourceCidr
	}
	return nil
}

func (m *RoutingRule) GetUserEmail() []string {
	if m != nil {
		return m.UserEmail
	}
	return nil
}

func (m *RoutingRule) GetInboundTag() []string {
	if m != nil {
		return m.InboundTag
	}
	return nil
}

func (m *RoutingRule) GetType() RoutingRule_Type {
	if m != nil {
		return m.Type
	}
	return RoutingRule_Field
}

type Config struct {
	DomainStrategy Config_DomainStrategy `protobuf:"varint,1,opt,name=domain_strategy,json=domainStrategy,enum=v2ray.core.app.router.Config_DomainStrategy" json:"domain_strategy,omitempty"`
	Rule           []*RoutingRule        `protobuf:"bytes,2,rep,name=rule" json:"rule,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Config) GetDomainStrategy() Config_DomainStrategy {
	if m != nil {
		return m.DomainStrategy
	}
	return Config_AsIs
}

func (m *Config) GetRule() []*RoutingRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func init() {
	proto.RegisterType((*Domain)(nil), "v2ray.core.app.router.Domain")
	proto.RegisterType((*CIDR)(nil), "v2ray.core.app.router.CIDR")
	proto.RegisterType((*RoutingRule)(nil), "v2ray.core.app.router.RoutingRule")
	proto.RegisterType((*Config)(nil), "v2ray.core.app.router.Config")
	proto.RegisterEnum("v2ray.core.app.router.Domain_Type", Domain_Type_name, Domain_Type_value)
	proto.RegisterEnum("v2ray.core.app.router.RoutingRule_Type", RoutingRule_Type_name, RoutingRule_Type_value)
	proto.RegisterEnum("v2ray.core.app.router.Config_DomainStrategy", Config_DomainStrategy_name, Config_DomainStrategy_value)
}

func init() { proto.RegisterFile("v2ray.com/core/app/router/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0x34, 0xcb, 0x96, 0x97, 0x51, 0x22, 0x8b, 0xa1, 0x30, 0x34, 0x51, 0x45, 0x88,
	0xf5, 0x80, 0x12, 0xa9, 0x08, 0x38, 0x0c, 0x84, 0x46, 0x37, 0x50, 0x25, 0x98, 0x26, 0x6f, 0xe3,
	0xc0, 0xa5, 0xf2, 0x52, 0x37, 0xb3, 0x48, 0x6d, 0xcb, 0x71, 0xb6, 0xf5, 0xc6, 0x8d, 0xff, 0x85,
	0xbf, 0x86, 0x3f, 0x09, 0xd9, 0xc9, 0xb4, 0x0e, 0xad, 0xec, 0xe6, 0x67, 0x7f, 0xde, 0x4f, 0x7f,
	0x1f, 0xbc, 0xb8, 0x18, 0x28, 0x32, 0x4f, 0x73, 0x31, 0xcb, 0x72, 0xa1, 0x68, 0x46, 0xa4, 0xcc,
	0x94, 0xa8, 0x35, 0x55, 0x59, 0x2e, 0xf8, 0x94, 0x15, 0xa9, 0x54, 0x42, 0x0b, 0xb4, 0x79, 0xcd,
	0x29, 0x9a, 0x12, 0x29, 0xd3, 0x86, 0xd9, 0x7a, 0xfe, 0x8f, 0x7b, 0x2e, 0x66, 0x33, 0xc1, 0x33,
	0x4e, 0x75, 0x26, 0x85, 0xd2, 0x8d, 0xf3, 0xd6, 0xce, 0x72, 0x8a, 0x53, 0x7d, 0x29, 0xd4, 0x8f,
	0x06, 0x4c, 0x7e, 0x3a, 0xe0, 0xef, 0x8b, 0x19, 0x61, 0x1c, 0xbd, 0x01, 0x4f, 0xcf, 0x25, 0x8d,
	0x9d, 0x9e, 0xd3, 0xef, 0x0e, 0x92, 0xf4, 0xce, 0xfc, 0x69, 0x03, 0xa7, 0x27, 0x73, 0x49, 0xb1,
	0xe5, 0xd1, 0x23, 0x58, 0xbd, 0x20, 0x65, 0x4d, 0x63, 0xb7, 0xe7, 0xf4, 0x03, 0xdc, 0x18, 0x49,
	0x1f, 0x3c, 0xc3, 0xa0, 0x00, 0x56, 0x8f, 0x4a, 0xc2, 0x78, 0xb4, 0x62, 0x8e, 0x98, 0x16, 0xf4,
	0x2a, 0x72, 0x10, 0x5c, 0x67, 0x8d, 0xdc, 0x24, 0x05, 0x6f, 0x38, 0xda, 0xc7, 0xa8, 0x0b, 0x2e,
	0x93, 0x36, 0xfb, 0x06, 0x76, 0x99, 0x44, 0x8f, 0xc1, 0x97, 0x8a, 0x4e, 0xd9, 0x95, 0x0d, 0xfc,
	0x00, 0xb7, 0x56, 0xf2, 0xcb, 0x83, 0x10, 0x8b, 0x5a, 0x33, 0x5e, 0xe0, 0xba, 0xa4, 0x28, 0x82,
	0x8e, 0x26, 0x85, 0x75, 0x0c, 0xb0, 0x39, 0xa2, 0xd7, 0xe0, 0x4f, 0x6c, 0xf4, 0xd8, 0xed, 0x75,
	0xfa, 0xe1, 0x60, 0xfb, 0xbf, 0xbd, 0xe0, 0x16, 0x46, 0x19, 0x78, 0x39, 0x9b, 0xa8, 0xb8, 0x63,
	0x9d, 0x9e, 0x2e, 0x71, 0x32, 0xb5, 0x62, 0x0b, 0xa2, 0x0f, 0x00, 0x66, 0xe6, 0x63, 0x45, 0x78,
	0x41, 0x63, 0xaf, 0xe7, 0xf4, 0xc3, 0x41, 0x6f, 0xd1, 0xad, 0x19, 0x7b, 0xca, 0xa9, 0x4e, 0x8f,
	0x84, 0xd2, 0xd8, 0x70, 0x38, 0x90, 0xd7, 0x47, 0x74, 0x00, 0x1b, 0xed, 0x77, 0x8c, 0x4b, 0x56,
	0xe9, 0x78, 0xd5, 0x86, 0x48, 0x96, 0x84, 0x38, 0x6c, 0xd0, 0x2f, 0xac, 0xd2, 0x38, 0xe4, 0x37,
	0x06, 0x7a, 0x07, 0x61, 0x25, 0x6a, 0x95, 0xd3, 0xb1, 0xad, 0xdf, 0xbf, 0xbf, 0x7e, 0x68, 0xf8,
	0xa1, 0xe9, 0x62, 0x1b, 0xa0, 0xae, 0xa8, 0x1a, 0xd3, 0x19, 0x61, 0x65, 0xbc, 0xd6, 0xeb, 0xf4,
	0x03, 0x1c, 0x98, 0x9b, 0x03, 0x73, 0x81, 0x9e, 0x41, 0xc8, 0xf8, 0x99, 0xa8, 0xf9, 0x64, 0x6c,
	0xc6, 0xbc, 0x6e, 0xdf, 0xa1, 0xbd, 0x3a, 0x21, 0x05, 0xda, 0x6d, 0x75, 0x13, 0x58, 0xdd, 0xec,
	0x2c, 0x49, 0xbb, 0xf0, 0x63, 0x0b, 0xe2, 0x49, 0x76, 0x6f, 0x64, 0xf2, 0x89, 0xd1, 0x72, 0x12,
	0xad, 0xa0, 0x10, 0xd6, 0x86, 0xe7, 0x8c, 0x93, 0x91, 0x8c, 0x1c, 0xd4, 0x05, 0xb0, 0xc6, 0x31,
	0xd3, 0xb4, 0x8a, 0x5c, 0xf3, 0xf8, 0x79, 0x7a, 0x69, 0xba, 0x8e, 0x3a, 0xc9, 0x1f, 0x07, 0xfc,
	0xa1, 0xdd, 0x19, 0x74, 0x0a, 0x0f, 0x9b, 0x5f, 0x1c, 0x57, 0x5a, 0x11, 0x4d, 0x8b, 0x79, 0xab,
	0xe3, 0x97, 0xcb, 0xc6, 0xd0, 0xec, 0x5a, 0x23, 0x81, 0xe3, 0xd6, 0x07, 0x77, 0x27, 0xb7, 0x6c,
	0xb3, 0x13, 0xaa, 0x2e, 0x69, 0xab, 0xa3, 0xe4, 0xfe, 0xde, 0xb0, 0xe5, 0x93, 0xb7, 0xd0, 0xbd,
	0x1d, 0x19, 0xad, 0x83, 0xb7, 0x57, 0x8d, 0xaa, 0x66, 0x0d, 0x4e, 0x2b, 0x6a, 0xbb, 0x8b, 0x60,
	0x63, 0x24, 0x47, 0xd3, 0x43, 0xc1, 0xbf, 0x12, 0x9d, 0x9f, 0x47, 0xee, 0xc7, 0xf7, 0xf0, 0x24,
	0x17, 0xb3, 0xbb, 0xf3, 0x1c, 0x39, 0xdf, 0xfd, 0xe6, 0xf4, 0xdb, 0xdd, 0xfc, 0x36, 0xc0, 0x64,
	0x9e, 0x0e, 0x0d, 0xb1, 0x27, 0xa5, 0x2d, 0x81, 0xaa, 0x33, 0xdf, 0x6e, 0xf5, 0xab, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd8, 0xb2, 0x2a, 0xe3, 0x65, 0x04, 0x00, 0x00,
}
